-------------------------
JavaScript Run-Time Environment
-------------------------

┌────────────────────────────────┐                        Web APIs
│       JavaScript Engine        │               ┌───────────────────────┐
│ ┌───────────┐    ┌───────────┐ │   ──>   ──>   │     DOM (document)    │
│ │Memory Heap│    │Call Stack │ │               ├───────────────────────┤
│ │  X        │    │           │ │               │ AJAX (XMLHttpRequest) │
│ │       X   │    │           │ │               ├───────────────────────┤
│ │    X      │    │           │ │               │ Timeout (setTimeout)  │
│ │           │    │~~~~~~~~~~~│ │               └───────────────────────┘
│ │           │    │~~~~~~~~~~~│ │  Event Loop           Job Queue 
│ │   X       │    │~~~~~~~~~~~│ │    ┌────┐   [promise] [promise] [promise]
│ │           │    │~~~~~~~~~~~│ │    │    │
│ └───────────┘    └───────────┘ │    └<─  ┘    [onClick] [onLoad] [onDone]
└────────────────────────────────┘                     Callback Queue



-------------------------
V8 Engine
-------------------------

Profiler: Checks for repeating code in the AST. 
          If finding any, the code will be moved to the compiler.

AST: Abstract Syntax Tree
V8 Interpreter: Ignition
V8 Compiler: TurboFan

 ┌───────────┐    ┌─────────────────────────────────────────────────────────────────────────┐
 │ script.js │ ─> │   ┌────────┐        ┌─────┐        ┌─────────────┐                      │
 │           │    │   │ Parser │ ──>──> │ AST │ ──>──> │ Interpreter │                      │
 │ <-------  │    │   └────────┘        └─────┘        └──────┬──────┘                      │
 │   -----   │    │                   ▲ ( ■_■) ▲              │                             │
 │ --------> │    │                  ┌──────────┐             │             ┌──────────┐    │
 └───────────┘    │                  │ Profiler │ <─ <─ <─ <─ ┴──>──>──>──> │ Bytecode │    │
                  │                  └────┬─────┘                           └──────────┘    │
                  │                       │                                                 │
                  │                  ┌────┴─────┐                       ┌────────────────┐  │
                  │                  │ Compiler │ ──>──>──>──>──>──>──> │ Optimized Code │  │
                  │                  └──────────┘                       └────────────────┘  │
                  └─────────────────────────────────────────────────────────────────────────┘



-------------------------
SpiderMonkey Engine
-------------------------

JIT Compiler: IonMonkey

 ┌───────────┐    ┌─────────────────────────────────────────────────────────────────────────┐
 │ script.js │ ─> │   ┌──────────┐              ┌───────────┐                               │
 │           │    │   │ Compiler │ ──>──>──>──> │ Byte Code │                               │
 │ <-------  │    │   └──────────┘              └─────┬─────┘                               │
 │   -----   │    │                                   │                                     │
 │ --------> │    │            ┌──────────────┐       │                   ┌─────────────┐   │
 └───────────┘    │            │ JIT Compiler │ <──<──┴──>──>──>──>──>──> │ Interpreter │   │
                  │            └──────┬───────┘                           └─────────────┘   │
                  │                   │                                                     │
                  │             ┌─────┴───────┐                                ┌─────┐      │
                  │             │ Native Code │ ──>──>──>──>──>──>──>──>──>──> │ CPU │      │
                  │             └─────────────┘                                └─────┘      │
                  └─────────────────────────────────────────────────────────────────────────┘



-------------------------
Critical Render Path
-------------------------

 ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐
 │                                 DOM Content Loaded                                             Load ┐ │
 │                                         │                                                           │ │
 │   ┌──────────┐        ┌───────────┐     │  ┌─────────────┐        ┌───────────┐        ┌───────────┐│ │
 │   │    DOM   │ ──>──> │   CSSOM   │ ──>─┴> │ Render Tree │ ──>──> │   Layout  │ ──>──> │   Paint   │X │
 │   └──────────┘        └───────────┘        └─────────────┘        └───────────┘        └───────────┘  │
 │                             ┌──> (4) {javascript}  (5) \                (6)                 (7)       │
 │  (1) <html>                 ↑                           \                                             │
 │            \                ↑                            \                                            │
 │             \               ↑                             \                                           │
 │              \              ↑                              \──<──<──<──<──<──<──<──< (8) {javascript} │
 │               \             ↑                                                                         │
 │                \    (2)   {css}                                                                       │
 │                 \─> (3) {javascript}                                                                  │
 └───────────────────────────────────────────────────────────────────────────────────────────────────────┘



-------------------------
Node.js Run-Time Environment
-------------------------

Worker Threads include:
- File System
- Network
- Process

    ┌─────────────┐         ┌──────────────────┐    ┌─────────────────────────────────────────────────────────────────┐
    │ Application │         │ Node.js Bindings │    │ Event Queue                 LIBUV                 Worker Threads│
    └─────────────┘         │                  │    │  ┌-------┐      ┌───  >─┐                            ┌-------┐  │
     ↑ JavaScript ↓         │                  │    │  └-------┘  ─>  │       │  ─> Blocking Operation ─>  └-------┘  │ 
 ┌─────────────────────┐    │                  │    │  ┌-------┐      │ Event │                            ┌-------┐  │
 │         V8          │ ─> │  ┌------------┐  │ ─> │  └-------┘      │ Loop  │                            └-------┘  │
 │       Engine        │ <─ │  │OS Operation│  │ <─ │  ┌-------┐  <─  │       │  <─  Execute Callback  <─  ┌-------┐  │
 │                     │    │  └------------┘  │    │  └-------┘      └─< ────┘                            └-------┘  │
 └─────────────────────┘    └──────────────────┘    └─────────────────────────────────────────────────────────────────┘



-------------------------
Node.js Components
-------------------------

┌────────────────────────────────────────────────────────────────────┐
│                ┌────────────────────┐     ┌────────┐     ┌───────┐ │
│ ┌────────┐     │    Node.js APIs    │     │        │     │       │ │
│ │        │     │┌────────┐┌────────┐│     │        │     │ ┌───┐ │ │
│ │   V8   │     ││   fs   ││  http  ││ --> │Node.js │ --> │ │Rex│ │ │
│ │        │     │└────────┘└────────┘│     │Bindings│     │ └───┘ │ │
│ └────────┘     │┌────────┐┌────────┐│     │        │     │ libuv │ │
│ JavaScript     ││  path  ││ crypto ││ --> │        │ --> │       │ │
│   Engine       │└────────┘└────────┘│     │        │     │       │ │
│                └────────────────────┘     └────────┘     └───────┘ │
└────────────────────────────────────────────────────────────────────┘



-------------------------
libuv multi-threading
-------------------------

┌────────────────────────────────────────────────────────────────┐
│libuv                          OS            ┌─────────────────┐│
│        EVENT LOOP      ┌──────────────┐     │Asynchronous I/O ││
│      ┌───>  ───> ┐ ←-- │    kernel    │ <1--│┌───────────────┐││
│      ^           ∨     └──────────────┘     ││  file system  │││
│      │           │        Thread pool       │└───────────────┘││
│      ^           ∨     ┌──┐┌──┐┌──┐┌──┐     │┌───────────────┐││
│      └ <───  <───┘ ←-- │  ││  ││  ││  │ <2--││    network    │││
│                        │  ││  ││  ││  │     │└───────────────┘││
│                        └──┘└──┘└──┘└──┘     └─────────────────┘│
└────────────────────────────────────────────────────────────────┘



-------------------------
The Event Loop Phases
-------------------------

    ┌───────────────┐
    │    Timers     │   <────<────<─┐
    └───────────────┘               ^
         ▼    ▼                     │
    ┌───────────────┐
    │ I/O callbacks │           EVENT LOOP
    └───────────────┘         ┌ <───  <───┐
         ▼    ▼               v           ^
    ┌───────────────┐         │           │
    │ setImmediate  │         v           ^
    └───────────────┘         └───>  ───> ┘
         ▼    ▼                     │
    ┌───────────────┐               ^
    │Close Callbacks│   >────>────>─┘
    └───────────────┘



-------------------------
Multi-Threading, Processes, and Threads
-------------------------

┌────────────────────────────────────────────────────────────────────────┐
│process ┌────────────────────────┐   ┌───────────────┐ ┌───────────────┐│
│        │          CODE          │   │    THREAD 1   │ │    THREAD 2   ││
│        │                        │   │┌─────────────┐│ │┌─────────────┐││
│        │1stFunction() {         │-->││ call stack  ││ ││ call stack  │││
│        │ 2ndFunction();         │   ││             ││ ││             │││
│        │}                       │   ││             ││ ││             │││
│        │                        │   ││             ││ ││             │││
│        │2ndFunction() {         │   ││      ▲      ││ ││             │││
│        │ return 42;             │   ││      │      ││ ││      ▲      │││
│        │}                       │-->││      │      ││ ││      │      │││
│        │                        │   ││2ndFunction()││ ││      │      │││
│        │new Thread(1stFunction);│   ││1stFunction()││ ││1stFunction()│││
│        │new Thread(2ndFunction);│   │└─────────────┘│ │└─────────────┘││
│        └────────────────────────┘   └───────────────┘ └───────────────┘│
└────────────────────────────────────────────────────────────────────────┘



-------------------------
Concurrency and Parallelism
-------------------------

    Concurrency        Concurrency + parallelism
 (Singe-Core CPU)           (Multi-Core CPU)
 
    ┌───┐                      ┌───┐┌───┐
    │th1│                      │th1││th2│
    │   │                      │   │└───┘
    └───┘┌───┐                 │   │┌───┐
         │th2│                 └───┘│th2│
    ┌───┐└───┘                 ┌───┐└───┘
    │th1│                      │th1│
    └───┘┌───┐                 │   │┌───┐
         │th2│                 │   ││th2│
         └───┘                 └───┘└───┘



-------------------------
Pass By Value vs Pass By Reference
-------------------------


        PASS BY REFERENCE                             PASS BY VALUE
 ┌──────────┐       ┌──────────┐          ┌────────────┐        ┌────────────┐
 │ object 1 │       │ object 2 │          │ variable 1 │        │ variable 2 │
 └──────────┘       └──────────┘          └────────────┘        └────────────┘
       \                 /                       │                     │
        \               /                        │                     │
 ┌─────────────────────────────┐          ┌────────────┐        ┌────────────┐
 │        object memory        │          │  primitive │        │  primitive │
 │     non-primitive type      │          │    type    │        │    type    │
 └─────────────────────────────┘          └────────────┘        └────────────┘



-------------------------
Traditional Cookie Based Authentication
-------------------------

 https://app.yourapp.com       https://app.yourapp.com
 ┌───────────┐                       ┌──────────┐
 │  Browser  │                       │  Server  │
 └─────┬─────┘                       └─────┬────┘
       │  POST /authenticate               │
       │  username=...&password=...        │
       ├──────────────────────────────────>│
       │                                   │
       │<──────────────────────────────────┤
       │  HTTP 200 OK                      │
       │  Set-Cookie: session=___          │
       │                                   │
       │                                   │
       │  GET /api/user                    │
       │  Cookie: session=...              │
       ├──────────────────────────────────>│──┐ find and
       │                                   │  │ deserialize
       │<──────────────────────────────────┤<─┘ session
       │  HTTP 200 OK                      │
       │  { name: "foo" }                  │
       │                                   │



-------------------------
Modern Token-Based Authentication
-------------------------

 https://app.yourapp.com       https://api.yourapp.com
 ┌───────────┐                       ┌──────────┐
 │  Browser  │                       │  Server  │
 └─────┬─────┘                       └─────┬────┘
       │  POST /authenticate               │
       │  username=...&password=...        │
       ├──────────────────────────────────>│
       │                                   │
       │<──────────────────────────────────┤
       │  HTTP 200 OK                      │
       │  { token: '...JWT...'}            │
       │                                   │
       │                                   │
       │  GET /api/user                    │
       │  Authorization: Bearer ...JWT...  │
       ├──────────────────────────────────>│──┐
       │                                   │  │ validate token
       │<──────────────────────────────────┤<─┘
       │  HTTP 200 OK                      │
       │  { name: "foo" }                  │
       │                                   │



-------------------------
Generic Tree
-------------------------

                       ┌────────┐
                       │ Parent │
                       └────────┘
                     /      |     \
          ┌─────────┐  ┌─────────┐  ┌─────────┐
          │ Child-1 │  │ Child-2 │  │ Child-3 │
          └─────────┘  └─────────┘  └─────────┘
           /        \                         \
 ┌───────────┐    ┌───────────┐            ┌───────────┐
 │ Child-1-1 │    │ Child-1-2 │            │ Child-3-1 │
 └───────────┘    └───────────┘            └───────────┘



-------------------------
Perfect Binary Tree
-------------------------

               ┌─────┐
               │     │
               └─────┘
              /       \
       ┌─────┐         ┌─────┐
       │     │         │     │
       └─────┘         └─────┘
       /     \         /      \
   ┌─────┐ ┌─────┐  ┌─────┐ ┌─────┐
   │     │ │     │  │     │ │     │
   └─────┘ └─────┘  └─────┘ └─────┘




-------------------------
Full Binary Tree
-------------------------

              ┌─────┐
              │     │
              └─────┘
             /      \
      ┌─────┐         ┌─────┐
      │     │         │     │
      └─────┘         └─────┘
      /    \
 ┌─────┐   ┌─────┐
 │     │   │     │
 └─────┘   └─────┘
           /     \
      ┌─────┐   ┌─────┐
      │     │   │     │
      └─────┘   └─────┘



-------------------------
Java Stack Memory
-------------------------

public static void main(String[] args) {
    int x = 5;
    boolean b = true;
    x = add(1, 2);
}

public static void int add(int a, int b) {
    int c = a + b;
    return c;
}

                  The Stack
┌─────────────────────────────────────────────┐
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│ ┌─────────────────────────────────────────┐ │
│ │                  Add                    │ │
│ │              a = 1 (int)                │ │
│ │              b = 2 (int)                │ │ <── Will be popped when 
│ │              c = 3 (int)                │ │      finished
│ └─────────────────────────────────────────┘ │
│ ┌─────────────────────────────────────────┐ │
│ │                 Main                    │ │
│ │              x = 5 (int)                │ │ <── invokes the add() method
│ │           b = true (boolean)            │ │
│ └─────────────────────────────────────────┘ │
└─────────────────────────────────────────────┘


                  The Stack
┌─────────────────────────────────────────────┐
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│                                             │
│ ┌─────────────────────────────────────────┐ │
│ │                 Main                    │ │
│ │              x = 3 (int)                │ │ <── return value, 3, is set
│ │           b = true (boolean)            │ │
│ └─────────────────────────────────────────┘ │
└─────────────────────────────────────────────┘
